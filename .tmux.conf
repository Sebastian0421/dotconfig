# tmux ls  # 查询所有会话
# tmux new -s session_name    # 创建会话
# tmux detach # 断开会话，或者使用快捷键 <prefix>-d
# tmux attach [-t session_name]   # 重新连接会话，-t session_name 指定连接的会话名称
# tmux kill-session -t session_name   # 关闭会话，会话关闭后，会话中所有的程序也会关闭
# s   # 列出所有会话
# $   # 重命名会话
# d   # 断开会话
# c # 新建窗口
# , # 重命名窗口
# w   # 列出所有窗口
# n # 选择下一个窗口
# p # 选择上一个窗口
# 0-9 # 选择对应编号的窗口
#
# - # 水平分割窗口，
# | # 垂直分割窗口，
# q # 显示窗格的编号
# o # 在窗格间切换
# } # 与下一个窗格交换位置
# { # 与上一个窗格交换位置
# x # 关闭当前窗格
#
# - # 创建一个水平窗格，默认键为 %
# |   # 创建一个竖直窗格，默认键为 "
# j # 选择下一个窗格
# k # 选择上一个窗格
# h # 选择左一个窗格
# l # 选择右一个窗格
# ctrl-down  # 向下resize窗格
# ctrl-up  # 向上resize窗格
# ctrl-left  # 向左resize窗格
# ctrl-right  # 向右resize窗格

# 列出所有快捷键，及其对应的 Tmux 命令
# tmux list-keys
# 列出所有 Tmux 命令及其参数
# tmux list-commands
# 列出当前所有 Tmux 会话的信息
# tmux info
# 重新加载当前的 Tmux 配置
# tmux source-file ~/.tmux.conf

# improve colors
set -g default-terminal "tmux-256color"
set -ga terminal-overrides ",*256col*:Tc"
# tmux默认快捷键的前缀是 ctrl-b, 我修改成了 ` (数字键1左边的那个键)
# Set Ctrl-b key bindings
unbind C-b
set -g prefix `

# 窗口索引从1开始，`-1 即切换到第一个窗口
# Count sessions start at 1
set -g base-index 1
# start pane numbers at 1 to match keyboard order with tmux order
setw -g pane-base-index 1

# vi模式，v开始选择，y 复制选择内容到剪贴板
# Use vim bindings
setw -g mode-keys vi

bind-key m copy-mode    # enter copy mode
#bind v paste-buffer     # paste content
# start selecting text typing 'v' key (once you are in copy mode)
bind -T copy-mode-vi "v" send -X begin-selection
bind -T copy-mode-vi "V" send -X rectangle-toggle
# bind -T copy-mode-vi "y" send -X copy-selection-and-cancel
# # copy selected text to the system's clipboard
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h  if-shell  "$is_vim"  "send-keys C-h"  "select-pane -L"
bind-key -n C-j   if-shell  "$is_vim"  "send-keys C-j"   "select-pane -D"
bind-key -n C-k  if-shell  "$is_vim"  "send-keys C-k"  "select-pane -U"
bind-key -n C-l   if-shell  "$is_vim"  "send-keys C-l"   "select-pane -R"

#up
bind-key k select-pane -U
#down
bind-key j select-pane -D
#left
bind-key h select-pane -L
#right
bind-key l select-pane -R

# 切分窗口，快捷键修改为 - 水平切分窗口， \ 垂直切分窗口
# split window
# create new windows/panes in same directory
bind c new-window -c "#{pane_current_path}"
bind-key | split-window -h
bind-key - split-window -v

# quit window
#unbind x
bind-key x kill-pane

# enable and disable keyboard input for panes
bind < select-pane -d \; display-message "input disabled"
bind > select-pane -e \; display-message "input enabled"

# size windows based on clients looking at that window
setw -g aggressive-resize on

# enable mouse control
set -g mouse on

# resize pane
bind-key -n C-Left  "resize-pane -L 5"
bind-key -n C-Right "resize-pane -R 5"
bind-key -n C-Up    "resize-pane -U 5"
bind-key -n C-Down  "resize-pane -D 5"

# Status bar settings
# alignment
set-option -g status-justify centre

# left-bottom corner
set-option -g status-left '#[bg=black,fg=green][#[fg=cyan]#S#[fg=green]]'
set-option -g status-left-length 20

# window list
set-window-option -g window-status-format '#[dim]#I:#[default]#W#[fg=grey,dim]'
set-window-option -g window-status-current-format '#[fg=cyan,bold]#I#[fg=blue]:#[fg=cyan]#W#[fg=dim]'

# right-bottom status
set -g status-right '#[fg=green][#[fg=cyan]%Y-%m-%d#[fg=green]]'

# center window status
set -g window-status-format "#I:#W"
set -g window-status-current-format "#I:#W"

# default statusbar colors
set -g status-fg white
set -g status-bg black

# default window title colors
set-window-option -g window-status-style fg=white
set-window-option -g window-status-style bg=default
set-window-option -g window-status-style dim

# active window title colors
set-window-option -ag window-status-current-style fg=red
set-window-option -ag window-status-current-style bg=default
set-window-option -ag window-status-current-style bold

# command/message line colors
set -g message-style fg=white
set -g message-style bg=black
set -g message-style bright

set -g status-keys vi
bind-key -T vi-edit Up send -X history-up
bind-key -T vi-edit Down send -X history-down

set -g status-interval 1
set -g status-justify centre # center align window list

# window-name
set-option -g allow-rename off

# pane number display
set -g display-panes-active-colour colour166 #blue
set -g display-panes-colour colour33 #orange

# reenable automatic renaming for the current window
bind N setw automatic-rename on \; display-message "automatic rename enabled"

# renumber windows sequentially after closing any of them
set -g renumber-windows on

# monitor windows for activity
setw -g monitor-activity on

# don't wait for escape sequences
set -sg escape-time 0

# display pane numbers for longer
set -g display-panes-time 2000

# NOTE: belowe settings are overridden by github_* theme
set -g status-left-length 20
set -g status-left '#{?pane_input_off,#[fg=colour160],#[fg=colour136]}[#[fg=colour136]#S:#I.#P#{?pane_input_off,#[fg=colour160],#[fg=colour136]}] '
set -g status-right '#[fg=colour166]#([ "$(tmux show-option -g prefix)" != "prefix C-a" ] && echo "($(tmux show-option -g prefix | cut -c 8-)) ")#[fg=colour33]%d %b %Y #{?client_prefix,#[fg=colour160],#[fg=colour61]}- #[fg=colour64]%I:%M %p #{?client_prefix,#[fg=colour160],#[fg=colour61]}- #[fg=colour37]#([ -f $HOME/.name ] && cat $HOME/.name || hostname)'


# increase scrollback lines
set -g history-limit 65536

# Allow local customization in ~/.tmux_local.conf
if-shell "[ -f ~/.tmux_local.conf ]" 'source ~/.tmux_local.conf'
