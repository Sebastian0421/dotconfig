{

	"fun": {
		"prefix": "fun",
		"body": [
			"function ${1:${2:out} = }${3:myFun}(${4:in})",
			"% ${3/(.*)/${1:/upcase}/} ${5:description}",
			"$0",
			"end"
		],
		"description": "minimalistic function declaration"
    },
    
	"function": {
		"prefix": "function",
		"body": [
			"function ${1:[${2:out1,out2}]} = ${3:myFun}(${4:in1,in2})",
			"% ${3/(.*)/${1:/upcase}/} ${5:description}",
			"%",
			"% Syntax:",
			"%\t$1 = $3($4)",
			"%",			
			"% Inputs:",
			"${4/\\s*(\\w+)\\s*,?\\s*/%\t$1 - \n/g}%",
			"% Outputs:",
			"${1/\\s*\\[?\\s*(\\w*)\\s*[,\\]]?\\s*/%\t$1 - \n/g}%",
			"% Example:",
			"%\t",			
			"% See also:",
            "%\t",			
			"$0",
			"end"
		],
		"description": "function declaration"
    },
    
    "forij" : {
        "prefix" : "forij",
        "body" : [
            "for i = ${1:1 : ${2:m}}",
            "\tfor j = ${3:1 : ${4:n}}",
            "\t\t$0",
            "\tend",
            "end"
        ],
        "description": "double for-loop"
    },

    "forijk" : {
        "prefix" : "forijk",
        "body" : [
            "for i = ${1:1 : ${2:m}}",
            "\tfor j = ${3:1 : ${4:n}}",
            "\t\tfor k = ${5:1 : ${6:p}}",
            "\t\t\t$0",
            "\t\tend",
            "\tend",
            "end"
        ],
        "description": "triple for-loop"
    },

    "for1" : {
        "prefix" : "for1",
        "body" : [
            "for i = 1 : length(${1:X})",
            "\t${2:${1/.*/${0:/downcase}/}} = $1(i);",
            "\t$0",
            "end"
        ],
        "description": "for-loop over a vector"
    },

    "for2" : {
        "prefix" : "for2",
        "body" : [
            "for i = 1 : size(${1:X},1)",
            "\tfor j = 1 : size($1,2)",
            "\t\t${2:${1/.*/${0:/downcase}/}} = $1(i,j);",
            "\t\t$0",
            "\tend",
            "end"
        ],
        "description": "for-loop over a matrix"
    },

    "for3" : {
        "prefix" : "for3",
        "body" : [
            "for i = 1 : size(${1:X},1)",
            "\tfor j = 1 : size($1,2)",
            "\t\tfor k = 1 : size($1,3)",
            "\t\t\t${2:${1/.*/${0:/downcase}/}} = $1(i,j,k);",
            "\t\t\t$0",
            "\t\tend",    
            "\tend",
            "end"
        ],
        "description": "for-loop over a 3D matrix"
    },

    "switch" : {
        "prefix" : "switch",
        "body" : [
            "switch ${1:expression}",
            "\tcase ${2:expression}",
            "\t\t$0",
            "\tcase ${3:expression}",
            "\t\t",
            "\totherwise",
            "\t\t",
            "end"
        ],        
        "description": "switch statement"
    },

    "if" : {
        "prefix" : "if",
        "body" : [
            "if ${1:expression}",
            "\t\t",
            "end"
        ],        
        "description": "switch statement"
    },

    "ife" : {
        "prefix" : "ife",
        "body" : [
            "if ${1:expression}",
            "\t\t",
            "else",
            "\t\t",
            "end"
        ],        
        "description": "if else statement"
    },

    "ifel" : {
        "prefix" : "ifel",
        "body" : [
            "if ${1:expression}",
            "\t\t",
            "elseif ${2:expression}",
            "\t\t",
            "else",
            "\t\t",
            "end"
        ],        
        "description": "if elseif statement"
    },

	"classdef": {
		"prefix": "classdef",
		"body": [
			"classdef ${1:MyClass}${2: < ${3:handle}}",
			"% ${1/(.*)/${1:/upcase}/} - ${4:Description}",
            "%",
            "properties",
            "\t${5:prop1}",
            "end",
            "",
            "methods",
            "\tfunction obj = $1()",
            "\t% $1 constructor",
            "\t\t$0",
            "\tend",
            "end",
            "",
			"end"
		],
		"description": "class declaration with a constructor"
    },    
    
	"properties": {
		"prefix": "properties",
		"body": [
            "properties(GetAccess = ${1|public,protected,private|}, SetAccess = ${2|public,protected,private|})",
            "\t$0",
            "end"
		],
		"description": "class properties declaration environment"
    },            

	"properties_dependent": {
		"prefix": "properties_dependent",
		"body": [
			"properties( Dependent )",
			"${1:    prop1\n    prop2}",
			"end",
			"",
            "methods",
            "\n${1/\\s*(.+)\\s*/\tfunction set.$1(obj,in)\n\t\tobj.$1 = in;\n\tend\n\n\tfunction out = get.$1(obj)\n\t\tout = obj.$1;\n\tend\n\n/g}end"
		],
		"description": "handle class dependent properties with set/get methods"
    },
    
	"property": {
		"prefix": "property",
		"body": [
			"${1:propName}(${2:dim1,dim2}) ${3:ClassName} {${4|mustBeReal,mustBeInteger,mustBePositive,mustBe, |}} = ${5:defaultValue}"
		],
		"description": "full property declaration"
	},    

	"methods": {
		"prefix": "methods",
		"body": [
            "methods(Access = ${1|public,protected,private|})",
            "\t$0",
            "end"
		],
		"description": "class methods declaration environment"
    },  
    
	"method": {
		"prefix": "method",
		"body": [
			"function ${1:[${2:out1,out2}]} = ${3:myMethod}(obj,${4:in1,in2})",
			"% ${3/(.*)/${1:/upcase}/} ${5:description}",
			"%",
			"% Syntax:",
			"%\t$1 = $3($4)",
			"%",			
			"% Inputs:",
			"${4/(\\w+),?/%\t$1 - \n/g}%",
			"% Outputs:",
			"${1/\\[?\\s*(\\w*)\\s*[,\\]]?/%\t$1 - \n/g}%",
			"$0",
			"end"
		],
		"description": "method declaration"
    },    

    "grid2D" : {
        "prefix" : "grid2D",
        "body" : [
            "[${1:X},${2:Y}] = meshgrid( ...",
            "\tlinspace(${3:-10},${4:${3/.*/${strAbs($0)}/}},${5:100}), ...",
            "\tlinspace(${6:$3},${7:$4},${8:$5}) );"
        ],
        "description": "2D meshgrid"
    },    

    "grid3D" : {
        "prefix" : "grid3D",
        "body" : [
            "[${1:X},${2:Y},${3:Z}] = meshgrid( ...",
            "\tlinspace(${4:-10},${5:${4/.*/${strAbs($0)}/}},${6:100}), ...",
            "\tlinspace(${7:$4},${8:$5},${9:$6}), ...",
            "\tlinspace(${10:$7},${11:$8},${12:$9}) );"
        ],
        "description": "3D meshgrid"
    },        

    "grid2Dsym" : {
        "prefix" : "grid2Dsym",
        "body" : [
            "rng = ${1:10}; % symetric grid range",
            "ngr = ${2:100}; % number of points in each dimension",
            "[X,Y] = meshgrid( ...",
            "\tlinspace(-rng,rng,ngr), ...",
            "\tlinspace(-rng,rng,ngr) );"
        ],
        "description": "symetric 2D meshgrid"
    },

    "grid3Dsym" : {
        "prefix" : "grid3sym",
        "body" : [
            "rng = ${1:10}; %symetric grid range",
            "ngr = ${2:100}; % number of points in each dimension",
            "[X,Y,Z] = meshgrid( ...",
            "\tlinspace(-rng,rng,ngr), ...",
            "\tlinspace(-rng,rng,ngr), ...",
            "\tlinspace(-rng,rng,ngr) );"
        ],
        "description": "symetric 3D meshgrid"
    },    

    "evalGrid2D" : {
        "prefix" : "evalGrid2D",
        "body" : [
            "${3///} = zeros(size(${1///}));",
            "for i = 1 : size(${1///},1)",
            "\tfor j = 1 : size(${1///},2)",
            "\t\t${4:${1/.*/${lower($0)}/}} = ${1:X}(i,j);",
            "\t\t${5:${2/.*/${lower($0)}/}} = ${2:Y}(i,j);",
            "\t\t${3:Z}(i,j) = $0;",
            "\tend",
            "end"
        ],
        "description": "evaluate on a 2D meshgrid"
    },    

    "evalGrid3D" : {
        "prefix" : "evalGrid3D",
        "body" : [
            "${4///} = zeros(size(${1///}));",
            "for i = 1 : size(${1///},1)",
            "\tfor j = 1 : size(${1///},2)",
            "\t\tfor k = 1 : size(${1///},3)",
            "\t\t\t${5:${1/.*/${lower($0)}/}} = ${1:X}(i,j);",
            "\t\t\t${6:${2/.*/${lower($0)}/}} = ${2:Y}(i,j);",
            "\t\t\t${7:${3/.*/${lower($0)}/}} = ${3:Z}(i,j);",
            "\t\t\t${4:M}(i,j,k) = $0;",
            "\t\tend",
            "\tend",
            "end"
        ],
        "description": "evaluate on a 3D meshgrid"
    },    

    "parseInputs" : {
        "prefix": "parseInputs",
        "body": [
            "function opt = parseInputs(arguments)",
            "\tp = inputParser;",
            "\t$0",
            "\tparse(p,arguments{:});",
            "\topt = p.Results;",
            "end"
        ],
        "description": "function parsing name-value arguments"
    },

    "parseInputsComplete" : {
        "prefix": "parseInputsComplete",
        "body": [
            "function ${1:fce}(varargin)",
            "opt = parseInputs(varargin);",
            "",
            "end",
            "",
            "function opt = parseInputs(arguments)",
            "\tp = inputParser;",
            "\t$0",
            "\tparse(p,arguments{:});",
            "\topt = p.Results;",
            "end"
        ],
        "description": "function name-value arguments parsing"
    },

    "parseInputs_double" : {
        "prefix": "parseInputs_double",
        "body": [
            "addParameter(p,'${1:paramName}',${2:defaultValue},@(x)validateattributes(x,{'double'},{'${4|scalar,vector,2d,column,row|}','${5|real,integer,positive,nonnegative,nonzero|}'${6:,'nonempty'}}));\n"
        ],
        "description": "add double argument"
    },

    "parseInputs_logical" : {
        "prefix": "parseInputs_logical",
        "body": [
            "addParameter(p,'${1:paramName}',${2:defaultValue},@(x)validateattributes(x,{'logical'},{'scalar'}));\n"
        ],
        "description": "add logical argument"
    },

    "parseInputs_char" : {
        "prefix": "parseInputs_char",
        "body": [
            "addParameter(p,'${1:paramName}','${2:defaultValue}',@(x)validateattributes(x,{'char'},{${3:'nonempty'}}));\n"
        ],
        "description": "add char argument"
    },

    "parseInputs_enum" : {
        "prefix": "parseInputs_enum",
        "body": [
            "addParameter(p,'${1:paramName}','${2:defaultValue}',@(x)any(validatestring(x,{${3:'on','off'}})));\n"
        ],
        "description": "add enumeration argument"
    },

    "struct" : {
        "prefix": "struct",
        "body": [
            "${1:varName} = struct( ...",
            "\t'${2:fieldName1}', ${3:value1}, ...",
            "\t'${4:fieldName2}', ${5:value2}, ...",
            "\t'${6:fieldName3}', ${7:value3} ...",
            ");"
        ],
        "description": "structure"
    },

    "cla" : {
        "prefix" : "cla",
        "body" : [
            "clear;",
            "close all;",
            "clc;\n"
        ],
        "description": "clear workspace and close windows"
    },
    "example01": {
      "prefix": "example01",
      "body": [
        "functionA();",
              "for i = 1 : n",
        "\tfunctionB();",
        "end\n"
      ],
      "description": "plain multi-line snippet"
      },

    "example02": {
      "prefix": "example02",
      "body": [
        "% Tabstops specify cursor positions for snippet customization:",
              "a = $1; b = $2; c = $3;",
              "% The sequence can be arbitrary:",
              "e = $6; f = $5; g = $4;",
              "% The tabstop number zero determines cursor position after",
              "% inserting the snippet into the editor:",
              "$0"
      ],
      "description": "tabstops"
      },

    "example03": {
      "prefix": "example03",
      "body": [
        "% Placeholders specify default values to the tabstops:",
              "a = ${1:123}; b = ${2:456}; c = ${3:678};"
      ],
      "description": "tabstop placeholders"
      },

    "example04": {
      "prefix": "example04",
      "body": [
        "% Tabstop value can be mirrored to multiple locations by using",
              "% the same tabstop number:",
              "a = ${1:123}; a1 = $1; a2 = $1;",
              "b = ${2:456}; b1 = $2; b2 = $2;"
      ],
      "description": "tabstop mirroring"
      },

    "example05": {
      "prefix": "example05",
      "body": [
        "% Placeholders can include nested tabstops. You can then either edit",
              "% the individual nested tabstops or you can overwrite the hosting",
              "% placeholder:",
              "a = A(${1:${2:i1}:${3:i2}});",
              "b = B(${6:${4:i1}:${5:i2}});",
              "% Notice that depending on the tabstop numbering you either start",
              "% by editing the hosting tabstop or by editing the individual nested",
              "% tabstops."
      ],
      "description": "nested placeholders"
      },

    "example06": {
      "prefix": "example06",
      "body": [
        "% Placeholders can have multiple choices that are selected",
              "% by up/down arrows:",
              "opt.display = '${1|on,off|}';"
      ],
      "description": "placeholder with choices"
      },

    "example07": {
      "prefix": "example07",
      "body": [
        "% Different variables can be automatically inserted, few examples:",
              "% Current time   = $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
              "% Current date   = $CURRENT_MONTH_NAME $CURRENT_DATE, $CURRENT_YEAR",
              "% Current file   = $TM_FILENAME",
              "% Matlab version = $MATLAB_VERSION",
              "% User name      = $TM_USERNAME"
      ],
      "description": "variables"
      },

    "example08": {
      "prefix": "example08",
      "body": [
              "% Placeholders can be transformed by regular expressions:",
              "function ${1:myFun}(${2:in1,in2})",
              "% ${1/(.*)/${1:/upcase}/} function description",
              "% Input arguments:",
              "${2/\\s*(\\w+)\\s*,?\\s*/%\t$1 - \n/g}%"
      ],
      "description": "placeholder transformations"
      },

    "example09": {
      "prefix": "example09",
      "body": [
              "% Variables can be transformed by regular expressions:",
              "% User name              = $TM_USERNAME",
              "% User name (upper case) = ${TM_USERNAME/(.*)/${1:/upcase}/}",
              "% User name (lower case) = ${TM_USERNAME/(.*)/${1:/downcase}/}",
              "% User name (capitalize) = ${TM_USERNAME/(.*)/${1:/capitalize}/}"
      ],
      "description": "variable transformations"
      },

      "min2" : {
          "prefix" : "min2",
          "body" : [
              "[${3:val},${4:irow}] = min(${2:A},[],1);",
              "[$3,${5:icol}] = min($3);",
              "$4 = $4($5);"     
          ],
          "description": "2D matrix minimum value and indexes"
      },

      "max2" : {
          "prefix" : "max2",
          "body" : [
              "[${3:val},${4:irow}] = max(${2:A},[],1);",
              "[$3,${5:icol}] = max($3);",
              "$4 = $4($5);"     
          ],
          "description": "2D matrix maximum value and indexes"
      },

      "plot" : {
              "prefix" : "plot",
              "body" : [
                  "plot(${1:x},${2:y},'LineWidth',${3:1},'LineStyle','${4:-}','MarkerSize',${5:10});"
              ],
              "description": "plot with options"
          },   

      "plotFun" : {
          "prefix" : "plotFun",
          "body" : [
              "fh = ${1:@(x)sin(pi*x)./(pi*x)};",
              "fplot(fh,[${2:-10} ${3:${2/.*/${strAbs($0)}/}}],'-','LineWidth',1,'MeshDensity',23);",
              "title(${4:regexp(func2str(fh),'(?<=@\\(.*?\\)).*','match','once')});",
              "xlabel(${5:regexp(func2str(fh),'(?<=\\().*?(?=\\))','match','once')});",
              "grid on;"
          ],
          "description": "plot function"
      },           

      "plotFunSurf" : {
          "prefix" : "plotFunSurf",
          "body" : [
              "fh = ${1:@(x,y)sin(pi*sqrt(x.^2+y.^2))./(pi*sqrt(x.^2+y.^2))};",
              "fsurf(fh,[${2:-5} ${3:${2/.*/${strAbs($0)}/}} ${4:$2} ${5:$3}],'MeshDensity',35,'ShowContours','${6|off,on|}');",
              "title( regexp(func2str(fh),'(?<=@\\(.*?\\)).*','match','once'));",
              "xlabel(regexp(func2str(fh),'(?<=\\().*?(?=,)','match','once'));",
              "ylabel(regexp(func2str(fh),'(?<=,).*?(?=\\))','match','once'));",
              "grid on;"            
          ],
          "description": "plot 3D function surface"
      },            
      
      "plotFunContour" : {
          "prefix" : "plotFunContour",
          "body" : [
              "fh = ${1:@(x,y)exp(-(x/3).^2-(y/3).^2)+exp(-(x+2).^2-(y+2).^2)};",
              "fcontour(fh,[${2:-5} ${3:${2/.*/${strAbs($0)}/}} ${4:$2} ${5:$3}],'MeshDensity',71,'Fill','${6|off,on|}');",
              "title( regexp(func2str(fh),'(?<=@\\(.*?\\)).*','match','once'));",
              "xlabel(regexp(func2str(fh),'(?<=\\().*?(?=,)','match','once'));",
              "ylabel(regexp(func2str(fh),'(?<=,).*?(?=\\))','match','once'));",
              "grid on;"            
          ],
          "description": "plot 3D function contour"
      },                

      "plotGridContourf" : {
          "prefix" : "plotGridContourf",
          "body" : [
              "[~,h] = contourf(${1:X},${2:Y},${3:Z});",
              "set(h,'ShowText','on');",
              "set(h,'TextStep',get(h,'LevelStep')*2);",
              "set(h,'LineWidth',2);",
              "colormap( (3*colormap+1)/4 );"
          ],
          "description": "grid contour and gradient plot"
      },    


      "plotGridContourGradient" : {
          "prefix" : "plotGridContourGradient",
          "body" : [
              "contour(${1:X},${2:Y},${3:Z}); hold on;",
              "[D$1,D$2] = gradient($3);",
              "quiver($1,$2,D$1,D$2); hold off;"
          ],
          "description": "grid contour and gradient plot"
      },    

      "plotGridMeshCurvature" : {
          "prefix" : "plotGridMeshCurvature",
          "body" : [
              "mesh(${1:X},${2:Y},${3:Z},del2(${3:Z}));"
          ],
          "description": "grid mesh with curvature colorization"
      },

      "evalGridSurf" : {
          "prefix" : "evalGridSurf",
          "body" : [
              "fh = ${1:@(x,y)sin(pi*sqrt(x.^2+y.^2))./(pi*sqrt(x.^2+y.^2))};",
              "rng = ${2:5}; % symetric grid range",
              "ngr = ${3:100}; % number of points in each dimension",
              "[${4:X},${5:Y}] = meshgrid( ...",
              "\tlinspace(-rng,rng,ngr), ...",
              "\tlinspace(-rng,rng,ngr) );",
              "$6 = zeros(size($4));",
              "for i = 1 : size($4,1)",
              "\tfor j = 1 : size($4,2)",
              "\t\t${6:Z}(i,j) = fh( $4(i,j), $5(i,j) );",
              "\tend",
              "end",
        "surf($4,$5,$6);",
              "xlabel('x');",
              "ylabel('y');"
          ],
          "description": "grid evaluation and surface plot"
      },

      "evalGridContourf" : {
          "prefix" : "evalGridContourf",
          "body" : [
              "fh = ${1:@(x,y)sin(pi*sqrt(x.^2+y.^2))./(pi*sqrt(x.^2+y.^2))};",
              "rng = ${2:5}; % symetric grid range",
              "ngr = ${3:100}; % number of points in each dimension",
              "[${4:X},${5:Y}] = meshgrid( ...",
              "\tlinspace(-rng,rng,ngr), ...",
              "\tlinspace(-rng,rng,ngr) );",
              "$6 = zeros(size($4));",
              "for i = 1 : size($4,1)",
              "\tfor j = 1 : size($4,2)",
              "\t\t${6:Z}(i,j) = fh( $4(i,j), $5(i,j) );",
              "\tend",
              "end",
              "[~,h] = contourf($4,$5,$6);",
              "set(h,'ShowText','on');",
              "set(h,'TextStep',get(h,'LevelStep')*2);",
              "set(h,'LineWidth',2);",
              "colormap( (3*colormap+1)/4 );",
              "xlabel('x');",
              "ylabel('y');"
          ],
          "description": "grid evaluation and contourf plot"
      },
      
      "plotAnnotation" : {
          "prefix" : "plotAnnotation",
          "body" : [
              "title('${1:Plot Title}');",
              "xlabel('${2:x axis label [units]}');",
              "ylabel('${3:y axis label [units]}');",
              "grid ${4|on,off|};"
          ],
          "description": "plot annotation"
      }

}    
